// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	repos "github.com/kserik/horizon-task/internal/pkg/repos"
	mock "github.com/stretchr/testify/mock"
)

// MarketplaceData is an autogenerated mocks type for the MarketplaceData type
type MarketplaceData struct {
	mock.Mock
}

// GetAggregatedData provides a mocks function with given fields:
func (_m *MarketplaceData) GetAggregatedData() ([]repos.AggregatedData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAggregatedData")
	}

	var r0 []repos.AggregatedData
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repos.AggregatedData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repos.AggregatedData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repos.AggregatedData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTransactions provides a mocks function with given fields: transactions
func (_m *MarketplaceData) InsertTransactions(transactions []repos.Transaction) error {
	ret := _m.Called(transactions)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]repos.Transaction) error); ok {
		r0 = rf(transactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TruncateAllData provides a mocks function with given fields:
func (_m *MarketplaceData) TruncateAllData() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TruncateAllData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMarketplaceData creates a new instance of MarketplaceData. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarketplaceData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarketplaceData {
	mock := &MarketplaceData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
